AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Fargate as a compute pool

Resources:
  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.0.0.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.0.128.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ContainerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Accepts incoming on port 80 from internet
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-repo
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      EncryptionConfiguration:
        EncryptionType: AES256

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest # assumed we've used the latest tag.
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargatepool

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Tasks
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ProcessGrabbedTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/process_task_grabbed/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 10
      ReservedConcurrentExecutions: 2
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: process-grabbed-tasks
          POWERTOOLS_METRICS_NAMESPACE: fargate-pool
          EVENT_BUS_NAME: !Ref TaskEventBus
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt TaskEventBus.Arn
      Events:
        StreamTrigger:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TasksTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 1
            MaximumRetryAttempts: 2
            ParallelizationFactor: 5

  LaunchTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/launch_task/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 75
      ReservedConcurrentExecutions: 15 # Max concurrency
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ECSCluster
          TASK_DEFINITION: !Ref TaskDefinition
          TABLE_NAME: !Ref TasksTable
          SUBNET_ID1: !Ref PublicSubnet1
          SUBNET_ID2: !Ref PublicSubnet2
          SECURITY_GROUP_ID: !Ref ContainerSecGroup
          POWERTOOLS_SERVICE_NAME: task-launcher
          POWERTOOLS_METRICS_NAMESPACE: fargate-pool
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ec2:DescribeNetworkInterfaces
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt TaskExecutionRole.Arn
      Events:
        TaskGrabbedEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref TaskEventBus
            Pattern:
              source:
                - com.fargate-pool
              detail-type:
                - TaskGrabbed

  TaskEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${AWS::StackName}-task-events

  ## Simulate task grabbing
  TaskGrabberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/sim_task_grabber/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          POWERTOOLS_SERVICE_NAME: simulate-task-grabber
          POWERTOOLS_METRICS_NAMESPACE: fargate-pool
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
      Events:
        ScheduledGrab:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Name: TaskGrabberSchedule
            Description: Grab tasks every minute
            Enabled: true

  ## Simulate task killing
  TaskKillFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/sim_task_killer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref TasksTable
          CLUSTER_NAME: !Ref ECSCluster
          POWERTOOLS_SERVICE_NAME: task-cleanup
          POWERTOOLS_METRICS_NAMESPACE: fargate-pool
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - ecs:StopTask
                - ecs:DescribeTasks
              Resource: "*"
      Events:
        ScheduledCleanup:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Name: TaskCleanupSchedule
            Description: Delete assigned tasks every minute
            Enabled: true

  ######################################
  # Monitoring service. Safe to delete #
  ######################################

  MonitoringTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-monitoring
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref MonitoringTaskRole
      ContainerDefinitions:
        - Name: monitoring
          Image: public.ecr.aws/amazonlinux/amazonlinux:2
          Environment:
            - Name: TABLE_NAME
              Value: !Ref TasksTable
            - Name: POWERTOOLS_METRICS_NAMESPACE
              Value: fargate-pool
          Command:
            - "/bin/bash"
            - "-c"
            - |
              yum update -y
              yum install -y python3 pip
              pip3 install boto3 aws-lambda-powertools
              python3 -c "
              import time
              import boto3
              import os
              from boto3.dynamodb.conditions import Key
              from aws_lambda_powertools import Metrics
              from aws_lambda_powertools.metrics import MetricUnit

              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(os.environ['TABLE_NAME'])
              metrics = Metrics(namespace='fargate-pool')

              STATUSES = ['LAUNCHING', 'RUNNING', 'ASSIGNED']
              SLEEP_INTERVAL = 10

              def query_and_log_metrics():
                  try:
                      counts = {}
                      for status in STATUSES:
                          count = 0
                          last_evaluated_key = None
                          
                          while True:
                              query_params = {
                                  'IndexName': 'StatusIndex',
                                  'KeyConditionExpression': Key('Status').eq(status)
                              }
                              
                              if last_evaluated_key:
                                  query_params['ExclusiveStartKey'] = last_evaluated_key
                              
                              response = table.query(**query_params)
                              count += response['Count']
                              
                              last_evaluated_key = response.get('LastEvaluatedKey')
                              if not last_evaluated_key:
                                  break
                          
                          counts[status.lower()] = count
                          metrics.add_metric(name=f'TaskCount_{status}', unit=MetricUnit.Count, value=count)
                      
                      total_count = sum(counts.values())
                      metrics.add_metric(name='TaskCount_Total', unit=MetricUnit.Count, value=total_count)
                      metrics.flush_metrics()
                      print(f'Current task counts: {counts}')
                  except Exception as e:
                      print(f'Error in querying tasks: {str(e)}')

              while True:
                  query_and_log_metrics()
                  time.sleep(SLEEP_INTERVAL)
              "
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: monitoring

  MonitoringTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MonitoringTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !GetAtt TasksTable.Arn
                  - !Sub "${TasksTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  MonitoringService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-monitoring
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MonitoringTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecGroup

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref ContainerSecGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup

  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}

  ECRRepositoryName:
    Description: ECR Repository Name
    Value: !Ref ECRRepository

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefinitionArn

  TasksTableName:
    Description: Name of the DynamoDB table for tasks
    Value: !Ref TasksTable

  TaskEventBusName:
    Description: Name of eventbus
    Value: !Ref TaskEventBus
